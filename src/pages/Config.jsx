import React, { useState } from "react";
import { saveAs } from "file-saver";
import FormField from "../components/FormField";
//import { Form } from "react-router-dom";

export default function ConfigPage({ props }) {
	const [inputText, setInputText] = useState("");
	const [inputKeywords, setInputKeywords] = useState("");
	const [scenarios, setScenarios] = useState([]);
	const [setError] = useState("");
	const [setErrors] = useState({});
	const [setTextIsValid] = useState(true);
	const [setKeywordsIsValid] = useState(true);
	// Default filename is of the form: scenarios_10-17-23--06-57-PM
	const dateString = new Date().toLocaleString("en-US", {
		year: "2-digit",
		month: "2-digit",
		day: "2-digit",
		hour: "2-digit",
		minute: "2-digit",
	});
	const [filename, setFilename] = useState(
		`scenarios_${dateString.replace(/[/: ,]/g, "-")}`
	);

	const addScenario = () => {
		if (inputText && inputKeywords) {
			const newScenario = {
				text: inputText,
				keywords: inputKeywords.split(",").map((keyword) => keyword.trim()),
			};

			setScenarios([...scenarios, newScenario]);
			setInputText("");
			setInputKeywords("");
			setError("");
		} else {
			if (!inputText) {
				setTextIsValid(false);
			}
			if (!inputKeywords) {
				setKeywordsIsValid(false);
			}
			setError("Please fill in all required fields.");
		}
	};

	// const handleTextChange = (value) => {
	// 	setInputText(value);
	// 	if (value) {
	// 		setTextIsValid(true);
	// 	} else {
	// 		setTextIsValid(false);
	// 	}
	// };

	// const handleKeywordsChange = (value) => {
	// 	setInputKeywords(value);
	// 	if (value) {
	// 		setKeywordsIsValid(true);
	// 	} else {
	// 		setKeywordsIsValid(false);
	// 	}
	// };

	const generateFile = () => {
		// TODO: also record username
		let fileContent = `// Generated by GPTeach at ${dateString}\n\n`;
		fileContent += `const scenarios = ${JSON.stringify(scenarios, null, 2)};`;
		fileContent += "\n\nexport default { scenarios };";
		console.log(fileContent);

		if (scenarios.length === 0) {
			setError("No scenarios added. Please add at least one scenario.");
			return;
		}
		setError("");

		const blob = new Blob([fileContent], { type: "text/javascript" });
		// Replace slashes, spaces, and colons with hyphens
		const sanitizedFilename = filename.replace(/[/ :]/g, "-") || "scenarios";
		saveAs(blob, `${sanitizedFilename}.js`);
	};

	return (
		<div className="container">
			<h1 className="mt-4">Configure Scenarios</h1>

			{/* {error && <div className="alert alert-danger">{error}</div>} */}
			{/* Show errors, if there are any */}
			{/* {Object.keys(errors).length !== 0 && (
				<div className="alert alert-danger">
					{Object.keys(errors).map((elem, i) => {
						return <div key={i}>{errors[elem]}</div>;
					})}
				</div>
			)} */}

			{/* <div className={`form-group ${textIsValid ? "" : "has-error"}`}>
				<label htmlFor="text" className="mt-2">
					Text:
				</label>
				<textarea
					id="text"
					className={`form-control ${textIsValid ? "" : "is-invalid"}`}
					value={inputText}
					onChange={(e) => handleTextChange(e.target.value)}
					placeholder={"The assignment this week is on for loops."}
				/>
			</div> */}

			<FormField
				label="Text:"
				placeholder="The assignment this week is on for loops."
				setErrors={setErrors}
			/>

			<FormField
				label="Keywords (comma-separated):"
				placeholder="loops, for loop"
				setErrors={setErrors}
			/>

			{/* <div className={`form-group ${keywordsIsValid ? "" : "has-error"}`}>
				<label htmlFor="keywords" className="mt-2">
					Keywords (comma-separated):
				</label>
				<input
					type="text"
					id="keywords"
					className={`form-control ${keywordsIsValid ? "" : "is-invalid"}`}
					value={inputKeywords}
					onChange={(e) => handleKeywordsChange(e.target.value)}
					placeholder={"for loops"}
				/>
			</div> */}

			<div className="form-group">
				<label htmlFor="filename" className="mt-2">
					Filename:
				</label>
				<input
					type="text"
					id="filename"
					className="form-control"
					value={filename}
					onChange={(e) => setFilename(e.target.value)}
				/>
			</div>

			<button className="btn btn-primary" onClick={addScenario}>
				Add Scenario
			</button>

			<hr />

			<h2 className="mt-4">Scenarios</h2>
			<ul className="list-group">
				{scenarios.map((scenario, index) => (
					<li key={index} className="list-group-item">
						<strong>Text:</strong> {scenario.text}
						<br />
						<strong>Keywords:</strong> {scenario.keywords.join(", ")}
					</li>
				))}
			</ul>

			<button className="btn btn-success mt-4" onClick={generateFile}>
				Generate File
			</button>
		</div>
	);
}
